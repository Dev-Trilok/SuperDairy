@model SuperDairy.Models.Auth.LoginViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = "Login";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    @*@User.Claims.Where(E=>E.Type == ClaimTypes.Role).First().Value*@

    <div class="d-flex justify-content-center ">
        @using (Html.BeginForm("Login", "Auth", FormMethod.Post, new { @class = "" }))

        {
            <div class="col-md-12 offset-md-12 mt-5">
                <div class="card">
                    <h4 class="card-header">Login</h4>
                    <div class="card-body">
                        <div class="form-group">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                            <div class="mb-3 form-group">
                                @Html.LabelFor(m => m.Username, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.Username, new { type = "number", @class = "form-control " })
                                @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                                
                            </div>
                            <div class="mb-3 form-group">
                                @Html.LabelFor(m => m.Password, new { @class = "form-label" })
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <input type="submit" value="Sign In" class="btn btn-primary" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div>
                <a asp-action="Register">Don't have an account ? Contact Administrator</a>
            </div>
        }
    </div>


</div>
@section Scripts {
            @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
        }

<script>
    function FunForLoginValidation() {
        var objValid = true;
        var objUserName = $("[id$=txtUserName]").val();
        var objPassword = $("[id$=txtPassword]").val();
        if (objUserName == "") {
            $('[id$=lblErrUserName]').text("User Name is required");
            $('[id$=lblErrUserName]').css("color", "#FF0000");
            $("[id$=txtUserName]").addClass("Error-control");
            objValid = false;
        }
        else {
            $('[id$=lblErrUserName]').text("");
            $('[id$=lblErrUserName]').css("color", "#FFFFFF");
            $("[id$=txtUserName]").removeClass("Error-control");
        }

        if (objPassword == "") {
            $('[id$=lblErrPassword]').text("Password is required");
            $('[id$=lblErrPassword]').css("color", "#FF0000");
            $("[id$=txtPassword]").addClass("Error-control");
            objValid = false;
        }
        else {
            $('[id$=lblErrPassword]').text("");
            $('[id$=lblErrPassword]').css("color", "#FFFFFF");
            $("[id$=txtPassword]").removeClass("Error-control");
        }
        return objValid;
    }
    function AcceptAlphanumeric(evt) {
        var key = evt.keyCode;
        return ((key >= 48 && key <= 57) || (key >= 65 && key <= 90) || (key >= 95 && key <= 122));
    }
    function NotAllowSingleDoubleQuotes(e) {
        var charCode = e.keyCode;
        if (charCode == 34)
            return false;
        if (charCode == 39)
            return false;
    }
</script>